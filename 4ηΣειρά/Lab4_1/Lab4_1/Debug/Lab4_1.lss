
AVRASM ver. 2.2.8  C:\Micro\Lab4_1\Lab4_1\main.asm Wed Dec 15 01:59:42 2021

[builtin](2): Including file 'E:/AVR Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m16def.inc'
[builtin](2): Including file 'E:/AVR Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m16def.inc'
                                 
                                 .DSEG
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16DEF_INC_
                                 #define _M16DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16
                                 #pragma AVRPART ADMIN PART_NAME ATmega16
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16DEF_INC_ */
                                 
                                 
000060                           _tmp_: .byte 2
                                 
                                 .CSEG
                                 
000000 c142                      rjmp main ; go to the start of the program
                                 .org 0x10
000010 c198                      rjmp ISR_TIMER1_OVF
                                 .org 0x1C
00001c c1b3                      rjmp ADC_INT
                                 
                                 ADC_init:
00001d e480                      ldi r24,(1<<REFS0) ; Vref: Vcc
00001e b987                      out ADMUX,r24 ;MUX4:0 = 00000 for A0.
                                 ;ADC is Enabled (ADEN=1)
                                 ;ADC Interrupts are Enabled (ADIE=1)
                                 ;Set Prescaler CK/128 = 62.5Khz (ADPS2:0=111)
00001f e88f                      ldi r24,(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)
000020 b986                      out ADCSRA,r24
000021 9508                      ret
                                 
                                 
                                 wait_msec:
000022 938f                      push r24 ; 2 κύκλοι (0.250 μsec)
000023 939f                      push r25 ; 2 κύκλοι
000024 ee86                      ldi r24 , low(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
000025 e093                      ldi r25 , high(998) ; 1 κύκλος (0.125 μsec)
000026 d005                      rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
000027 919f                      pop r25 ; 2 κύκλοι (0.250 μsec)
000028 918f                      pop r24 ; 2 κύκλοι
000029 9701                      sbiw r24 , 1 ; 2 κύκλοι
00002a f7b9                      brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
00002b 9508                      ret ; 4 κύκλοι (0.500 μsec)
                                 
                                 wait_usec:
00002c 9701                      sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
00002d 0000                      nop ; 1 κύκλος (0.125 μsec)
00002e 0000                      nop ; 1 κύκλος (0.125 μsec)
00002f 0000                      nop ; 1 κύκλος (0.125 μsec)
000030 0000                      nop ; 1 κύκλος (0.125 μsec)
000031 f7d1                      brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
000032 9508                      ret ; 4 κύκλοι (0.500 μsec)
                                 
                                 scan_row_sim:
000033 bb95                      out PORTC, r25 ; η αντίστοιχη γραμμή τίθεται στο λογικό ‘1’
000034 938f                      push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
000035 939f                      push r25 ; λειτουργία του προγραμματος απομακρυσμένης
000036 ef84                      ldi r24,low(500) ; πρόσβασης
000037 e091                      ldi r25,high(500)
000038 dff3                      rcall wait_usec
000039 919f                      pop r25
00003a 918f                      pop r24 ; τέλος τμήμα κώδικα
00003b 0000                      nop
00003c 0000                      nop ; καθυστέρηση για να προλάβει να γίνει η αλλαγή κατάστασης
00003d b383                      in r24, PINC ; επιστρέφουν οι θέσεις (στήλες) των διακοπτών που είναι πιεσμένοι
00003e 708f                      andi r24 ,0x0f ; απομονώνονται τα 4 LSB όπου τα ‘1’ δείχνουν που είναι πατημένοι
00003f 9508                      ret ; οι διακόπτες.
                                 
                                 scan_keypad_sim:
000040 93af                      push r26 ; αποθήκευσε τους καταχωρητές r27:r26 γιατι τους
000041 93bf                      push r27 ; αλλάζουμε μέσα στην ρουτίνα
000042 e190                      ldi r25 , 0x10 ; έλεγξε την πρώτη γραμμή του πληκτρολογίου (PC4: 1 2 3 A)
000043 dfef                      rcall scan_row_sim
000044 9582                      swap r24 ; αποθήκευσε το αποτέλεσμα
000045 2fb8                      mov r27, r24 ; στα 4 msb του r27
000046 e290                      ldi r25 ,0x20 ; έλεγξε τη δεύτερη γραμμή του πληκτρολογίου (PC5: 4 5 6 B)
000047 dfeb                      rcall scan_row_sim
000048 0fb8                      add r27, r24 ; αποθήκευσε το αποτέλεσμα στα 4 lsb του r27
000049 e490                      ldi r25 , 0x40 ; έλεγξε την τρίτη γραμμή του πληκτρολογίου (PC6: 7 8 9 C)
00004a dfe8                      rcall scan_row_sim
00004b 9582                      swap r24 ; αποθήκευσε το αποτέλεσμα
00004c 2fa8                      mov r26, r24 ; στα 4 msb του r26
00004d e890                      ldi r25 ,0x80 ; έλεγξε την τέταρτη γραμμή του πληκτρολογίου (PC7: * 0 # D)
00004e dfe4                      rcall scan_row_sim
00004f 0fa8                      add r26, r24 ; αποθήκευσε το αποτέλεσμα στα 4 lsb του r26
000050 01cd                      movw r24, r26 ; μετέφερε το αποτέλεσμα στους καταχωρητές r25:r24
000051 27aa                      clr r26 ; προστέθηκε για την απομακρυσμένη πρόσβαση
000052 bba5                      out PORTC,r26 ; προστέθηκε για την απομακρυσμένη πρόσβαση
000053 91bf                      pop r27 ; επανάφερε τους καταχωρητές r27:r26
000054 91af                      pop r26
000055 9508                      ret 
                                 
                                 scan_keypad_rising_edge_sim:
000056 936f                      push r22 ; αποθήκευσε τους καταχωρητές r23:r22 και τους
000057 937f                      push r23 ; r26:r27 γιατι τους αλλάζουμε μέσα στην ρουτίνα
000058 93af                      push r26
000059 93bf                      push r27
00005a dfe5                      rcall scan_keypad_sim ; έλεγξε το πληκτρολόγιο για πιεσμένους διακόπτες
00005b 938f                      push r24 ; και αποθήκευσε το αποτέλεσμα
00005c 939f                      push r25
00005d e08f                      ldi r24 ,15 ; καθυστέρησε 15 ms (τυπικές τιμές 10-20 msec που καθορίζεται από τον
00005e e090                      ldi r25 ,0 ; κατασκευαστή του πληκτρολογίου – χρονοδιάρκεια σπινθηρισμών)
00005f dfc2                      rcall wait_msec
000060 dfdf                      rcall scan_keypad_sim ; έλεγξε το πληκτρολόγιο ξανά και απόρριψε
000061 917f                      pop r23 ; όσα πλήκτρα εμφανίζουν σπινθηρισμό
000062 916f                      pop r22
000063 2386                      and r24 ,r22
000064 2397                      and r25 ,r23
000065 e6a0                      ldi r26 ,low(_tmp_) ; φόρτωσε την κατάσταση των διακοπτών στην
000066 e0b0                      ldi r27 ,high(_tmp_) ; προηγούμενη κλήση της ρουτίνας στους r27:r26
000067 917d                      ld r23 ,X+
000068 916c                      ld r22 ,X
000069 938c                      st X ,r24 ; αποθήκευσε στη RAM τη νέα κατάσταση
00006a 939e                      st -X ,r25 ; των διακοπτών
00006b 9570                      com r23
00006c 9560                      com r22 ; βρες τους διακόπτες που έχουν «μόλις» πατηθεί
00006d 2386                      and r24 ,r22
00006e 2397                      and r25 ,r23
00006f 91bf                      pop r27 ; επανάφερε τους καταχωρητές r27:r26
000070 91af                      pop r26 ; και r23:r22
000071 917f                      pop r23
000072 916f                      pop r22
000073 9508                      ret
                                 
                                 keypad_to_ascii_sim:
000074 93af                      push r26 ; αποθήκευσε τους καταχωρητές r27:r26 γιατι τους
000075 93bf                      push r27 ; αλλάζουμε μέσα στη ρουτίνα
000076 01dc                      movw r26 ,r24	; λογικό ‘1’ στις θέσεις του καταχωρητή r26 δηλώνουν
000077 e28a                      ldi r24 ,'*'	; τα παρακάτω σύμβολα και αριθμούς
000078 fda0                      sbrc r26 ,0
000079 c02f                      rjmp return_ascii
00007a e380                      ldi r24 ,'0'
00007b fda1                      sbrc r26 ,1
00007c c02c                      rjmp return_ascii
00007d e283                      ldi r24 ,'#'
00007e fda2                      sbrc r26 ,2
00007f c029                      rjmp return_ascii
000080 e484                      ldi r24 ,'D'
000081 fda3                      sbrc r26 ,3 ; αν δεν είναι ‘1’παρακάμπτει την ret, αλλιώς (αν είναι ‘1’)
000082 c026                      rjmp return_ascii ; επιστρέφει με τον καταχωρητή r24 την ASCII τιμή του D.
000083 e387                      ldi r24 ,'7'
000084 fda4                      sbrc r26 ,4
000085 c023                      rjmp return_ascii
000086 e388                      ldi r24 ,'8'
000087 fda5                      sbrc r26 ,5
000088 c020                      rjmp return_ascii
000089 e389                      ldi r24 ,'9'
00008a fda6                      sbrc r26 ,6
00008b c01d                      rjmp return_ascii ;
00008c e483                      ldi r24 ,'C'
00008d fda7                      sbrc r26 ,7
00008e c01a                      rjmp return_ascii
00008f e384                      ldi r24 ,'4' ; λογικό ‘1’ στις θέσεις του καταχωρητή r27 δηλώνουν
000090 fdb0                      sbrc r27 ,0 ; τα παρακάτω σύμβολα και αριθμούς
000091 c017                      rjmp return_ascii
000092 e385                      ldi r24 ,'5'
000093 fdb1                      sbrc r27 ,1
000094 c014                      rjmp return_ascii
000095 e386                      ldi r24 ,'6'
000096 fdb2                      sbrc r27 ,2
000097 c011                      rjmp return_ascii
000098 e482                      ldi r24 ,'B'
000099 fdb3                      sbrc r27 ,3
00009a c00e                      rjmp return_ascii
00009b e381                      ldi r24 ,'1'
00009c fdb4                      sbrc r27 ,4
00009d c00b                      rjmp return_ascii ;
00009e e382                      ldi r24 ,'2'
00009f fdb5                      sbrc r27 ,5
0000a0 c008                      rjmp return_ascii
0000a1 e383                      ldi r24 ,'3' 
0000a2 fdb6                      sbrc r27 ,6
0000a3 c005                      rjmp return_ascii
0000a4 e481                      ldi r24 ,'A'
0000a5 fdb7                      sbrc r27 ,7
0000a6 c002                      rjmp return_ascii
0000a7 2788                      clr r24
0000a8 c000                      rjmp return_ascii
                                 return_ascii:
0000a9 91bf                      pop r27 ; επανάφερε τους καταχωρητές r27:r26
0000aa 91af                      pop r26
0000ab 9508                      ret 
                                 
                                 write_2_nibbles_sim:
0000ac 938f                      push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
0000ad 939f                      push r25 ; λειτουργία του προγραμματος απομακρυσμένης
0000ae e780                      ldi r24 ,low(6000) ; πρόσβασης
0000af e197                      ldi r25 ,high(6000)
0000b0 df7b                      rcall wait_usec
0000b1 919f                      pop r25
0000b2 918f                      pop r24 ; τέλος τμήμα κώδικα
0000b3 938f                      push r24 ; στέλνει τα 4 MSB
0000b4 b390                      in r25, PIND ; διαβάζονται τα 4 LSB και τα ξαναστέλνουμε
0000b5 709f                      andi r25, 0x0f ; για να μην χαλάσουμε την όποια προηγούμενη κατάσταση
0000b6 7f80                      andi r24, 0xf0 ; απομονώνονται τα 4 MSB και
0000b7 0f89                      add r24, r25 ; συνδυάζονται με τα προϋπάρχοντα 4 LSB
0000b8 bb82                      out PORTD, r24 ; και δίνονται στην έξοδο
0000b9 9a93                      sbi PORTD, PD3 ; δημιουργείται παλμός Enable στον ακροδέκτη PD3
0000ba 9893                      cbi PORTD, PD3 ; PD3=1 και μετά PD3=0
0000bb 938f                      push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
0000bc 939f                      push r25 ; λειτουργία του προγραμματος απομακρυσμένης
0000bd e780                      ldi r24 ,low(6000) ; πρόσβασης
0000be e197                      ldi r25 ,high(6000)
0000bf df6c                      rcall wait_usec
0000c0 919f                      pop r25
0000c1 918f                      pop r24 ; τέλος τμήμα κώδικα
0000c2 918f                      pop r24 ; στέλνει τα 4 LSB. Ανακτάται το byte.
0000c3 9582                      swap r24 ; εναλλάσσονται τα 4 MSB με τα 4 LSB
0000c4 7f80                      andi r24 ,0xf0 ; που με την σειρά τους αποστέλλονται
0000c5 0f89                      add r24, r25
0000c6 bb82                      out PORTD, r24
0000c7 9a93                      sbi PORTD, PD3 ; Νέος παλμός Enable
0000c8 9893                      cbi PORTD, PD3
0000c9 9508                      ret
                                 
                                 lcd_data_sim:
0000ca 938f                      push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
0000cb 939f                      push r25 ; αλλάζουμε μέσα στη ρουτίνα
0000cc 9a92                      sbi PORTD, PD2 ; επιλογή του καταχωρητή δεδομένων (PD2=1)
0000cd dfde                      rcall write_2_nibbles_sim ; αποστολή του byte
0000ce e28b                      ldi r24 ,43 ; αναμονή 43μsec μέχρι να ολοκληρωθεί η λήψη
0000cf e090                      ldi r25 ,0 ; των δεδομένων από τον ελεγκτή της lcd
0000d0 df5b                      rcall wait_usec
0000d1 919f                      pop r25 ;επανάφερε τους καταχωρητές r25:r24
0000d2 918f                      pop r24
0000d3 9508                      ret 
                                 
                                 lcd_command_sim:
0000d4 938f                      push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
0000d5 939f                      push r25 ; αλλάζουμε μέσα στη ρουτίνα
0000d6 9892                      cbi PORTD, PD2 ; επιλογή του καταχωρητή εντολών (PD2=0)
0000d7 dfd4                      rcall write_2_nibbles_sim ; αποστολή της εντολής και αναμονή 39μsec
0000d8 e287                      ldi r24, 39 ; για την ολοκλήρωση της εκτέλεσης της από τον ελεγκτή της lcd.
0000d9 e090                      ldi r25, 0 ; ΣΗΜ.: υπάρχουν δύο εντολές, οι clear display και return home,
0000da df51                      rcall wait_usec ; που απαιτούν σημαντικά μεγαλύτερο χρονικό διάστημα.
0000db 919f                      pop r25 ; επανάφερε τους καταχωρητές r25:r24
0000dc 918f                      pop r24
0000dd 9508                      ret 
                                 
                                 lcd_init_sim:
0000de 938f                      push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
0000df 939f                      push r25 ; αλλάζουμε μέσα στη ρουτίνα
                                 
0000e0 e288                      ldi r24, 40 ; Όταν ο ελεγκτής της lcd τροφοδοτείται με
0000e1 e090                      ldi r25, 0 ; ρεύμα εκτελεί την δική του αρχικοποίηση.
0000e2 df3f                      rcall wait_msec ; Αναμονή 40 msec μέχρι αυτή να ολοκληρωθεί.
0000e3 e380                      ldi r24, 0x30 ; εντολή μετάβασης σε 8 bit mode
0000e4 bb82                      out PORTD, r24 ; επειδή δεν μπορούμε να είμαστε βέβαιοι
0000e5 9a93                      sbi PORTD, PD3 ; για τη διαμόρφωση εισόδου του ελεγκτή
0000e6 9893                      cbi PORTD, PD3 ; της οθόνης, η εντολή αποστέλλεται δύο φορές
0000e7 e287                      ldi r24, 39
0000e8 e090                      ldi r25, 0 ; εάν ο ελεγκτής της οθόνης βρίσκεται σε 8-bit mode
0000e9 df42                      rcall wait_usec ; δεν θα συμβεί τίποτα, αλλά αν ο ελεγκτής έχει διαμόρφωση
                                  ; εισόδου 4 bit θα μεταβεί σε διαμόρφωση 8 bit
0000ea 938f                      push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
0000eb 939f                      push r25 ; λειτουργία του προγραμματος απομακρυσμένης
0000ec ee88                      ldi r24,low(1000) ; πρόσβασης
0000ed e093                      ldi r25,high(1000)
0000ee df3d                      rcall wait_usec
0000ef 919f                      pop r25
0000f0 918f                      pop r24 ; τέλος τμήμα κώδικα
0000f1 e380                      ldi r24, 0x30
0000f2 bb82                      out PORTD, r24
0000f3 9a93                      sbi PORTD, PD3
0000f4 9893                      cbi PORTD, PD3
0000f5 e287                      ldi r24,39
0000f6 e090                      ldi r25,0
0000f7 df34                      rcall wait_usec 
0000f8 938f                      push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
0000f9 939f                      push r25 ; λειτουργία του προγραμματος απομακρυσμένης
0000fa ee88                      ldi r24 ,low(1000) ; πρόσβασης
0000fb e093                      ldi r25 ,high(1000)
0000fc df2f                      rcall wait_usec
0000fd 919f                      pop r25
0000fe 918f                      pop r24 ; τέλος τμήμα κώδικα
0000ff e280                      ldi r24,0x20 ; αλλαγή σε 4-bit mode
000100 bb82                      out PORTD, r24
000101 9a93                      sbi PORTD, PD3
000102 9893                      cbi PORTD, PD3
000103 e287                      ldi r24,39
000104 e090                      ldi r25,0
000105 df26                      rcall wait_usec
000106 938f                      push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
000107 939f                      push r25 ; λειτουργία του προγραμματος απομακρυσμένης
000108 ee88                      ldi r24 ,low(1000) ; πρόσβασης
000109 e093                      ldi r25 ,high(1000)
00010a df21                      rcall wait_usec
00010b 919f                      pop r25
00010c 918f                      pop r24 ; τέλος τμήμα κώδικα
00010d e288                      ldi r24,0x28 ; επιλογή χαρακτήρων μεγέθους 5x8 κουκίδων
00010e dfc5                      rcall lcd_command_sim ; και εμφάνιση δύο γραμμών στην οθόνη
00010f e08c                      ldi r24,0x0c ; ενεργοποίηση της οθόνης, απόκρυψη του κέρσορα
000110 dfc3                      rcall lcd_command_sim
000111 e081                      ldi r24,0x01 ; καθαρισμός της οθόνης
000112 dfc1                      rcall lcd_command_sim
000113 ef8a                      ldi r24, low(1530)
000114 e095                      ldi r25, high(1530)
000115 df16                      rcall wait_usec
000116 e086                      ldi r24 ,0x06 ; ενεργοποίηση αυτόματης αύξησης κατά 1 της διεύθυνσης
000117 dfbc                      rcall lcd_command_sim ; που είναι αποθηκευμένη στον μετρητή διευθύνσεων και
                                  ; απενεργοποίηση της ολίσθησης ολόκληρης της οθόνης
000118 919f                      pop r25 ; επανάφερε τους καταχωρητές r25:r24
000119 918f                      pop r24
00011a 9508                      ret
                                 
                                 print_clear:
00011b e081                      ldi r24,0x01 ;clear the lcd
00011c dfb7                      rcall lcd_command_sim
00011d e483                      ldi r24, 'C'
00011e dfab                      rcall lcd_data_sim
00011f e48c                      ldi r24, 'L'
000120 dfa9                      rcall lcd_data_sim
000121 e485                      ldi r24, 'E'
000122 dfa7                      rcall lcd_data_sim
000123 e481                      ldi r24, 'A'
000124 dfa5                      rcall lcd_data_sim
000125 e582                      ldi r24, 'R'
000126 dfa3                      rcall lcd_data_sim
000127 9508                      ret
                                 
                                 print_gas_detected:
000128 e081                      ldi r24,0x01 ;clear the lcd
000129 dfaa                      rcall lcd_command_sim
00012a e487                      ldi r24, 'G'
00012b df9e                      rcall lcd_data_sim
00012c e481                      ldi r24, 'A'
00012d df9c                      rcall lcd_data_sim
00012e e583                      ldi r24, 'S'
00012f df9a                      rcall lcd_data_sim
000130 e280                      ldi r24, ' '
000131 df98                      rcall lcd_data_sim
000132 e484                      ldi r24, 'D'
000133 df96                      rcall lcd_data_sim
000134 e485                      ldi r24, 'E'
000135 df94                      rcall lcd_data_sim
000136 e584                      ldi r24, 'T'
000137 df92                      rcall lcd_data_sim
000138 e485                      ldi r24, 'E'
000139 df90                      rcall lcd_data_sim
00013a e483                      ldi r24, 'C'
00013b df8e                      rcall lcd_data_sim
00013c e584                      ldi r24, 'T'
00013d df8c                      rcall lcd_data_sim
00013e e485                      ldi r24, 'E'
00013f df8a                      rcall lcd_data_sim
000140 e484                      ldi r24, 'D'
000141 df88                      rcall lcd_data_sim
000142 9508                      ret
                                 
                                 main:
000143 e58f                      ldi r24, low(RAMEND) ;initialize stack pointer
000144 bf8d                      out SPL, r24
000145 e084                      ldi r24, high(RAMEND)
000146 bf8e                      out SPH, r24
000147 ef80                      ldi r24, (1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4) ; 4 MSB of PORTC as outputs
000148 bb84                      out DDRC, r24
000149 2788                      clr r24
00014a bb85                      out PORTC, r24 ;disable pull-ups
00014b bb8a                      out DDRA, r24 ; PINA as input
00014c ef8f                      ser r24
00014d bb87                      out DDRB, r24 ;PORTB as output
00014e bb81                      out DDRD, r24 ;PORTD as output
00014f 9380 0060                 sts _tmp_, r24 ; initialize _tmp_
000151 2788                      clr r24
000152 e020                      ldi r18, 0x00
000153 df8a                      rcall lcd_init_sim ;initialize the lcd
000154 dec8                      rcall ADC_init
                                 
000155 e083                      ldi r24 ,(0<<CS12) | (1<<CS11) | (1<<CS10) ; CK/64=125KHz
000156 bd8e                      out TCCR1B ,r24
                                 
000157 ec8f                      ldi r24,0xCF ; initialize TCNT1 for overflow after 0.1s
000158 bd8d                      out TCNT1H ,r24 ; 0.1s = 12.500 cycles 65536-12500=53036=0xCF2C
000159 e28c                      ldi r24 ,0x2C
00015a bd8c                      out TCNT1L ,r24
                                 
00015b e084                      ldi r24 ,(1<<TOIE1) ; enable overflow interrupt of TCNT1
00015c bf89                      out TIMSK ,r24
                                 
00015d e020                      ldi r18, 0x00 ; initialize led state
00015e e0c0                      ldi r28, 0x00 ; initialize PB7
00015f e032                      ldi r19, 0x02 ; previous state (gas(1)-no gas(0)) initialized at 2 so that we get an initial print
000160 e0e0                      ldi r30, 0x00 ; 1 if a special team has entered. no speacial team has entered
                                 
000161 9478                      sei ;enable all interrupts
                                 
                                 digit1:
000162 def3                      rcall scan_keypad_rising_edge_sim ;read the first number
000163 df10                      rcall keypad_to_ascii_sim ;convert the button pressed to ascii
000164 3080                      cpi r24,0x00 ;check if a button was pressed otherwise read again
000165 f3e1                      breq digit1
000166 2f48                      mov r20,r24 ;Store the ascii code in r20
000167 5340                      subi r20,0x30 ;then convert it to an integer
                                 
                                 digit2:
000168 deed                      rcall scan_keypad_rising_edge_sim ;same for the second number
000169 df0a                      rcall keypad_to_ascii_sim
00016a 3080                      cpi r24,0x00
00016b f3e1                      breq digit2
00016c 2f58                      mov r21,r24 ;Store the ascii code in r21
00016d 5350                      subi r21,0x30 ;then convert it to an integer
                                 
00016e 3044                      cpi r20,0x04 ;Check if both digits of the password are correct
00016f f539                      brne wrong
000170 3055                      cpi r21,0x05
000171 f529                      brne wrong
                                 
                                 correct: ;if they are
                                 ;cli ;disable interrupts-alarm
000172 e0e1                      ldi r30 , 0x01 ; a special team has entered
000173 e032                      ldi r19, 0x02 ; invalid previous state so that a new message is printed after 4s
000174 e081                      ldi r24,0x01 ;clear the lcd
000175 df5e                      rcall lcd_command_sim
000176 e840                      ldi r20, 0x80
000177 2b42                      or r20, r18
000178 bb48                      out PORTB,r20 ;PB7 on alongside led state
000179 e587                      ldi r24, 'W' ;Print "WELCOME" on the lcd
00017a df4f                      rcall lcd_data_sim
00017b e485                      ldi r24, 'E'
00017c df4d                      rcall lcd_data_sim
00017d e48c                      ldi r24, 'L'
00017e df4b                      rcall lcd_data_sim
00017f e483                      ldi r24, 'C'
000180 df49                      rcall lcd_data_sim
000181 e48f                      ldi r24, 'O'
000182 df47                      rcall lcd_data_sim
000183 e48d                      ldi r24, 'M'
000184 df45                      rcall lcd_data_sim
000185 e485                      ldi r24, 'E'
000186 df43                      rcall lcd_data_sim
000187 e280                      ldi r24, ' '
000188 df41                      rcall lcd_data_sim       
000189 eb4e                      ldi r20,0xBE  ; each call of scan_keypad_rising_edge_sim takes longer than 19ms (19ms is the total delay time from delay routines).
                                 			;we call it 190 times for a total delay ~4s
                                 
                                 loop1:
00018a e8f0                      ldi r31, 0x80
00018b 2bf2                      or r31, r18
00018c bbf8                      out PORTB, r31 ;keep updating gas levels
00018d 954a                      dec r20
00018e dec7                      rcall scan_keypad_rising_edge_sim
00018f 3040                      cpi r20,0x00
000190 f7c9                      brne loop1 ;keep reading from keypad and ignoring until 4s have passed
                                 ;clr r20
000191 2f42                      mov r20, r18 ; turn PB7 off
000192 bb48                      out PORTB,r20 ;turn off the leds
000193 e081                      ldi r24,0x01 ;clear the lcd
000194 df3f                      rcall lcd_command_sim
                                 ;sei ; re-enable interrupts and alarm
000195 e0e0                      ldi r30, 0x00 ;special team has exited
000196 cfcb                      rjmp digit1 ;read a new code
                                 
                                 wrong: ;if the wrong password was inserted
000197 e044                      ldi r20,0x04 ;total of 4 blinks
                                 outerloop:
000198 954a                      dec r20
000199 e8c0                      ldi r28, 0x80 ; PB7 on for 0.5s
00019a e158                      ldi r21,0x18 ;each call of scan_keypad_rising_edge_sim takes longer than 19ms (19ms is the total delay time from delay routines).
                                 				;we call it 24 times for a total delay of ~0.5s
                                 
                                 inner1:
00019b 9ac7                      sbi PORTB, 7 ; Turn PB7 on for 0.5s
00019c 955a                      dec r21
00019d deb8                      rcall scan_keypad_rising_edge_sim ;keep reading digits but ignoring them for 0.5s
00019e 3050                      cpi r21,0x00
00019f f7d9                      brne inner1
                                 
0001a0 e158                      ldi r21,0x18 ;each call of scan_keypad_rising_edge_sim takes longer than 19ms (19ms is the total delay time from delay routines).
                                 				;we call it 24 times for a total delay of ~0.5s
                                 
                                 inner2:
0001a1 98c7                      cbi PORTB, 7 ; Then PB7 back off
0001a2 955a                      dec r21
0001a3 deb2                      rcall scan_keypad_rising_edge_sim ;keep reading digits but ignoring them for 0.5s
0001a4 3050                      cpi r21,0x00
0001a5 f7d9                      brne inner2
                                 
0001a6 3040                      cpi r20,0x00
0001a7 f781                      brne outerloop ;total of four blinks
0001a8 cfb9                      rjmp digit1 ;read a new password
                                 
                                 ISR_TIMER1_OVF: ;every 0.1s
0001a9 30e1                      cpi r30, 0x01 ;check if a special team has entered
0001aa f111                      breq read_adc ;if yes don't blink the lights
0001ab e100                      ldi r16, 0x10
0001ac 2302                      and r16, r18 ;isolate bit4 of r18 which indicates gas presence
0001ad 3100                      cpi r16, 0x10;
0001ae f059                      breq gas
                                 
                                 no_gas:
0001af 3030                      cpi r19, 0x00 ; if previous state was clear don't print clear again
0001b0 f009                      breq skip_print_clear
0001b1 df69                      rcall print_clear
                                 skip_print_clear:
0001b2 e030                      ldi r19,0x00 ; previous state = no gas
0001b3 b3d8                      in r29, PORTB
0001b4 78d0                      andi r29, 0x80 ;Consider the state in which PB7 is
0001b5 2bd2                      or r29, r18
0001b6 bbd8                      out PORTB, r29 ;Print gas level alongside PB7
0001b7 e010                      ldi r17,0x00 ;reset blink timer for gas alarm
0001b8 940c 01cd                 jmp read_adc
                                 
                                 gas:
0001ba 3031                      cpi r19, 0x01 ; if previous state was gas_detected don't print gas detected again
0001bb f009                      breq skip_print_gas_detected
0001bc df6b                      rcall print_gas_detected
                                 skip_print_gas_detected:
0001bd e031                      ldi r19, 0x01 ; previous state = gas
0001be 9513                      inc r17
0001bf 3016                      cpi r17,0x06 ;for the first 5*0.1=0.5s led's on then off for another 0.5s
0001c0 f430                      brsh blink_off
                                 
                                 blink_on:
                                 ;mov r29, r28
                                 ;or r29, r18
                                 ;out PORTB, r29
0001c1 b3d8                      in r29, PORTB ;Consider the state in which PB7 is
0001c2 78d0                      andi r29, 0x80
0001c3 2bd2                      or r29, r18
0001c4 bbd8                      out PORTB, r29 ;Print gas level for 0.5s alongside PB7
                                 ;out PORTB, r18
0001c5 940c 01cd                 jmp read_adc
                                 
                                 blink_off:
                                 ;out PORTB, r28
                                 ;ldi r16, 0x00
0001c7 b3d8                      in r29, PORTB ;Consider the state in which PB7 is
0001c8 78d0                      andi r29, 0x80
0001c9 bbd8                      out PORTB, r29 ;Blink all leds off keeping PB7 as is
                                 ;out PORTB, r16
0001ca 301a                      cpi r17,0x0A
0001cb f409                      brne read_adc
0001cc e010                      ldi r17,0x00 
                                 
                                 read_adc:
0001cd 9a36                      SBI ADCSRA, 6 ;read from ADC
0001ce 9478                      sei ; re-enable interrupts
0001cf 9508                      ret
                                 
                                 ADC_INT:
0001d0 930f                      push r16 ;Store registers r16, r17 that will be used
0001d1 931f                      push r17
0001d2 b104                      in r16, ADCL ;retrieve the value read from ADC
0001d3 b115                      in r17, ADCH
0001d4 7013                      andi r17,0x03
                                 
0001d5 e72f                      ldi r18, 0b01111111
0001d6 3011                      cpi r17, 0x01 ;if value read is higher than 90ppm
0001d7 f498                      brsh go_back
                                 
0001d8 e32f                      ldi r18, 0b00111111
0001d9 3f02                      cpi r16, 0xF2 ;if value read is higher than 84ppm
0001da f480                      brsh go_back
                                 
0001db e12f                      ldi r18, 0b00011111
0001dc 3c0d                      cpi r16, 0xCD ;if value read is higher than 70ppm
0001dd f468                      brsh go_back
                                 
0001de e02f                      ldi r18, 0b00001111
0001df 3a08                      cpi r16, 0xA8 ;if value read is higher than 56ppm
0001e0 f450                      brsh go_back
                                 
0001e1 e027                      ldi r18, 0b00000111
0001e2 3803                      cpi r16, 0x83 ;if value read is higher than 42ppm
0001e3 f438                      brsh go_back
                                 
0001e4 e023                      ldi r18, 0b00000011
0001e5 350e                      cpi r16, 0x5E ;if value read is higher than 28ppm
0001e6 f420                      brsh go_back
                                 
0001e7 e021                      ldi r18, 0b00000001
0001e8 3309                      cpi r16, 0x39 ;if value read is higher than 14ppm
0001e9 f408                      brsh go_back
                                 
0001ea e020                      ldi r18, 0x00 ;if value read is lower than 14ppm
                                 go_back:
0001eb ec8f                      ldi r24,0xCF ; reset TCNT1
0001ec bd8d                      out TCNT1H ,r24 ; for overflow after 0.1s
0001ed e28c                      ldi r24 ,0x2C
0001ee bd8c                      out TCNT1L ,r24
0001ef 9478                      sei ; re-enable interrupts
0001f0 911f                      pop r17
0001f1 910f                      pop r16
0001f2 9508                      ret
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
x  :   4 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  12 r17:  10 r18:  16 r19:   6 r20:  14 
r21:   9 r22:   7 r23:   7 r24: 150 r25:  48 r26:  21 r27:  17 r28:   2 
r29:  11 r30:   4 r31:   3 
Registers used: 17 out of 35 (48.6%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   4 adiw  :   0 and   :   5 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   6 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   9 brpl  :   0 brsh  :   8 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   7 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :  21 cpse  :   0 dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 inc   :   1 jmp   :   2 
ld    :   2 ldd   :   0 ldi   : 127 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   5 movw  :   2 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   6 or    :   4 ori   :   0 out   :  28 pop   :  33 
push  :  33 rcall :  67 ret   :  15 reti  :   0 rjmp  :  22 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   8 sbic  :   0 sbis  :   0 
sbiw  :   2 sbr   :   0 sbrc  :  16 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   3 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   1 
sub   :   0 subi  :   2 swap  :   3 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003e6    946      0    946   16384   5.8%
[.dseg] 0x000060 0x000062      0      2      2    1024   0.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
